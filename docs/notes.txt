voor mixcolumns:
reduceren is een vrij irritante operatie, dus die willen we in een lookuptable zetten
dit kost 256 bytes, want voor elke byte wil je de reductiewaarde opslaan
eventueel kunnen we ook de vermenigvuldigingen in een lookuptabel zetten, omdat het er maar 3 zijn
dit kost dan 768 bytes

verschil in assembly:
optie 1: (SRAM)
	1 lookup voor reductie voor x1
	1 shift voor x 2
	1 xor voor x 3
	1 lookup voor reductie voor x2
	1 lookup voor reductie voor x3

optie 2: (FLASH)
	1 lookup voor reductie x1
	1 lookup voor reductie x2
	1 lookup voor reductie x3
	
	
na gesprek met kostas: maak T-tables zoals AES ze ook heeft

sbox en multcolumns combineren dus
gegenereerd met een c-programmatje

eerste test: sbox op identiteit, nieuwe multtables erin
maarrrrr dan wordt de mult*1 nooit door de sbox gehaald
dus we moeten de asm code sowieso nog eventjes refactoren
-> dit levert geen optimalisaties op lijkt het, want eerst hadden we 1 lookup voor alle x1 mults
en nu hebben we alsnog 1 lookup nodig voor de 1x mults, want dat is effectief de sbox

nieuwe poging: Tboxen zoals AES
maarrrr dit gaat hard fout, want het resultaat van die Tboxen werkt omdat je 32bit kan teruggeven
wij geven 8bit terug, dus het is niet te optimaliseren naar kolommen teruggeven

optimalisatie in manier van loaden:
ldi low sbox
add r30 r16
kan vervangen worden door
mov r30 r16

we zorgen ervoor dat de state altijd op r8-15 staat aan het einde van de loop

klein detail om een ldi-high te sparen:
mult2 mult3 mult2 mult3 -> 2 3 3 2 (want 3 blijft in high) (-11 cycles)

lookup tables naar onderin het geheugen gezet om ruimte te hebben voor meer loop unrolling

keymoven kan een stukje efficienter door de waarde uit de sbox nog even te laten staan in high
en dan is er geen cirkel van verplaatsingen meer (~40 cycles)

zitten nu op 2043 cycles

mult2->mult3: r19 hoeft niet opnieuw naar r30 want staat daar nog van de vorige lookup
idem voor mult3->mult2 met r23

zitten nu op 2019

nu kunnen we de loops unrollen;
een deel van de 12e round moet na de 3e tabel, want past niet meer voor de tables
winst zit nu in het skippen van de branch en jumps van loops
en de moves van bytes van de key (want die gaan nu impliciet)
misschien in het verslag hier een diagrammetje bij opnemen;
bij elke unroll verplaats je effectief moves van de keyschedule omhoog, waar ze verdwijnen

zitten nu op 1889

door unrollen kunnen we de eerste keer de state hoog laten staan

zitten nu op 1881

door de plaintext alvast gerotate te loaden voorkomen we dat we r28 en r29 nodig hebben voor round 1
in round 1 verzorgt de sbox dus niet de rotate, maar gebeurt dat al eerder (i.t.t. alle andere rounds)
nu hebben we r26-29 helemaal vrij, en stoppen we daar r0-r3 van de key in
dit gaat nu de helft van de moves van key->sbox voorkomen
dus find and replace r0-r3 door r26-29 en de moves weggooien rondom sboxloads

zitten nu op 1869

=== vanaf hier komen we erachter dat r0-r15 ook geladen kunnen worden vanuit FLASH ===

nu reverten we de key-dingen zodat de key weer in r0-r7 staat
en nu doen we de lpm's direct naar r0-r7 en sparen we weer wat cycles

zitten nu op 1857

macro all the things
we hebben nu r25 met een counter, we zouden die steeds kunnen ldi'en want we hebben alles geunrolled
maar we hebben geen behoefte aan meer lege registers

de code is inmiddels dusdanig veel kleiner geworden dat het gewoon past boven de data

zitten nu op 1855

doordat we kunnen lpm'en in low kunnen we de volgorde van mult1 / mult2 / mult3 slimmer maken
door mult1 pas op het einde te doen zijn dit 2 xors ipv een mov en een xor, en scheelt
het een move van mult2.

zitten nu op 1760

we combineren nu de sbox en de mult
dit heeft als resultaat dat we ook de rotate in deze combinatie-methode moeten doen
het doel is om de registers die we naar r30 moven optimaler te kunnen hergebruiken
om te voorkomen dat we aan het einde van dit feest weer van high naar low moeten moven (of andersom),
zorgen we ervoor dat we de macro de volgende round in spiegelbeeld uitvoeren (dwz low to high of andersom)
dit was eerst niet nodig om de sbox de move deed, maar dat kan nu dus niet

sbox zit nu vlak voor de mixnibbles, de source wordt dus gerotate (want je doet de rotate impliciet)

nu gaan we de boel spiegelen
we maken high2low en low2high macro's voor subrotmix, maar ook de roundkey moet dus ofwel low ofwel high ge-add worden

na de optimalisaties met mult2 / sbox-volgorde weer te fixen hebben we weer precies 1760

nu profiteren we van deze enorme refactor en zetten we de ldi voor de sbox niet meer aan in de keyschedule

zitten nu op 1749

nu gaan we de keyschedule een argument meegeven voor de roundnumber, zodat we die niet bij hoeven te houden
jemmerdebemmer, we deden geen inc op het einde dus dit levert geen cyclewinst op
wel een register!

het zou leuk zijn geweest om nu de sbox alsnog naar bovenin de mult2-mult1-mult3-cycle te krijgen zodat de ldi high altijd gecombineerd kan worden, maar dat lukt niet omdat je elk resultaat van een sbox lookup twee keer gebruikt, en dus niet direct naar zn doel kan lpm'en zonder een overbodige xor te doen

zitten nu op 1749

sbox hangt onderaan, dus de keyschedule moet _onder_ de mix-cycle zodat de ldi kan worden hergebruikt

zitten nu op 1748