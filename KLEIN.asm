.org 0x0500
sbox:
.db 0x77, 0x74, 0x7A, 0x79, 0x71, 0x7F, 0x7B, 0x70, 0x7C, 0x73, 0x72, 0x76, 0x78, 0x7E, 0x7D, 0x75, 0x47, 0x44, 0x4A, 0x49, 0x41, 0x4F, 0x4B, 0x40, 0x4C, 0x43, 0x42, 0x46, 0x48, 0x4E, 0x4D, 0x45, 0xA7, 0xA4, 0xAA, 0xA9, 0xA1, 0xAF, 0xAB, 0xA0, 0xAC, 0xA3, 0xA2, 0xA6, 0xA8, 0xAE, 0xAD, 0xA5, 0x97, 0x94, 0x9A, 0x99, 0x91, 0x9F, 0x9B, 0x90, 0x9C, 0x93, 0x92, 0x96, 0x98, 0x9E, 0x9D, 0x95, 0x17, 0x14, 0x1A, 0x19, 0x11, 0x1F, 0x1B, 0x10, 0x1C, 0x13, 0x12, 0x16, 0x18, 0x1E, 0x1D, 0x15, 0xF7, 0xF4, 0xFA, 0xF9, 0xF1, 0xFF, 0xFB, 0xF0, 0xFC, 0xF3, 0xF2, 0xF6, 0xF8, 0xFF, 0xFD, 0xF5, 0xB7, 0xB4, 0xBA, 0xB9, 0xB1, 0xBF, 0xBB, 0xB0, 0xBC, 0xB3, 0xB2, 0xB6, 0xB8, 0xBE, 0xBD, 0xB5, 0x07, 0x04, 0x0A, 0x09, 0x01, 0x0F, 0x0B, 0x00, 0x0C, 0x03, 0x02, 0x06, 0x08, 0x0E, 0x0D, 0x05, 0xC7, 0xC4, 0xCA, 0xC9, 0xC1, 0xCF, 0xCB, 0xC0, 0xCC, 0xC3, 0xC2, 0xC6, 0xC8, 0xCE, 0xCD, 0xC5, 0x37, 0x34, 0x3A, 0x39, 0x31, 0x3F, 0x3B, 0x30, 0x3C, 0x33, 0x32, 0x36, 0x38, 0x3E, 0x3D, 0x35, 0x27, 0x24, 0x2A, 0x29, 0x21, 0x2F, 0x2B, 0x20, 0x2C, 0x23, 0x22, 0x26, 0x28, 0x2E, 0x2D, 0x25, 0x67, 0x64, 0x6A, 0x69, 0x61, 0x6F, 0x6B, 0x60, 0x6C, 0x63, 0x62, 0x66, 0x68, 0x6E, 0x6D, 0x65, 0x87, 0x84, 0x8A, 0x89, 0x81, 0x8F, 0x8B, 0x80, 0x8C, 0x83, 0x82, 0x86, 0x88, 0x8E, 0x8D, 0x85, 0xE7, 0xE4, 0xEA, 0xE9, 0xE1, 0xEF, 0xEB, 0xE0, 0xEC, 0xE3, 0xE2, 0xE6, 0xE8, 0xEE, 0xED, 0xE5, 0xD7, 0xD4, 0xDA, 0xD9, 0xD1, 0xDF, 0xDB, 0xD0, 0xDC, 0xD3, 0xD2, 0xD6, 0xD8, 0xDE, 0xDD, 0xD5, 0x57, 0x54, 0x5A, 0x59, 0x51, 0x5F, 0x5B, 0x50, 0x5C, 0x53, 0x52, 0x56, 0x58, 0x5E, 0x5D, 0x55

.org 0x0600
mult2:
;.db 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5 
.db 0xee, 0xe8, 0xf4, 0xf2, 0xe2, 0xfe, 0xf6, 0xe0, 0xf8, 0xe6, 0xe4, 0xec, 0xf0, 0xfc, 0xfa, 0xea, 0x8e, 0x88, 0x94, 0x92, 0x82, 0x9e, 0x96, 0x80, 0x98, 0x86, 0x84, 0x8c, 0x90, 0x9c, 0x9a, 0x8a, 0x55, 0x53, 0x4f, 0x49, 0x59, 0x45, 0x4d, 0x5b, 0x43, 0x5d, 0x5f, 0x57, 0x4b, 0x47, 0x41, 0x51, 0x35, 0x33, 0x2f, 0x29, 0x39, 0x25, 0x2d, 0x3b, 0x23, 0x3d, 0x3f, 0x37, 0x2b, 0x27, 0x21, 0x31, 0x2e, 0x28, 0x34, 0x32, 0x22, 0x3e, 0x36, 0x20, 0x38, 0x26, 0x24, 0x2c, 0x30, 0x3c, 0x3a, 0x2a, 0xf5, 0xf3, 0xef, 0xe9, 0xf9, 0xe5, 0xed, 0xfb, 0xe3, 0xfd, 0xff, 0xf7, 0xeb, 0xe5, 0xe1, 0xf1, 0x75, 0x73, 0x6f, 0x69, 0x79, 0x65, 0x6d, 0x7b, 0x63, 0x7d, 0x7f, 0x77, 0x6b, 0x67, 0x61, 0x71, 0x0e, 0x08, 0x14, 0x12, 0x02, 0x1e, 0x16, 0x00, 0x18, 0x06, 0x04, 0x0c, 0x10, 0x1c, 0x1a, 0x0a, 0x95, 0x93, 0x8f, 0x89, 0x99, 0x85, 0x8d, 0x9b, 0x83, 0x9d, 0x9f, 0x97, 0x8b, 0x87, 0x81, 0x91, 0x6e, 0x68, 0x74, 0x72, 0x62, 0x7e, 0x76, 0x60, 0x78, 0x66, 0x64, 0x6c, 0x70, 0x7c, 0x7a, 0x6a, 0x4e, 0x48, 0x54, 0x52, 0x42, 0x5e, 0x56, 0x40, 0x58, 0x46, 0x44, 0x4c, 0x50, 0x5c, 0x5a, 0x4a, 0xce, 0xc8, 0xd4, 0xd2, 0xc2, 0xde, 0xd6, 0xc0, 0xd8, 0xc6, 0xc4, 0xcc, 0xd0, 0xdc, 0xda, 0xca, 0x15, 0x13, 0x0f, 0x09, 0x19, 0x05, 0x0d, 0x1b, 0x03, 0x1d, 0x1f, 0x17, 0x0b, 0x07, 0x01, 0x11, 0xd5, 0xd3, 0xcf, 0xc9, 0xd9, 0xc5, 0xcd, 0xdb, 0xc3, 0xdd, 0xdf, 0xd7, 0xcb, 0xc7, 0xc1, 0xd1, 0xb5, 0xb3, 0xaf, 0xa9, 0xb9, 0xa5, 0xad, 0xbb, 0xa3, 0xbd, 0xbf, 0xb7, 0xab, 0xa7, 0xa1, 0xb1, 0xae, 0xa8, 0xb4, 0xb2, 0xa2, 0xbe, 0xb6, 0xa0, 0xb8, 0xa6, 0xa4, 0xac, 0xb0, 0xbc, 0xba, 0xaa

.org 0x0700
mult3:
; .db 0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
.db 0x99, 0x9c, 0x8e, 0x8b, 0x93, 0x81, 0x8d, 0x90, 0x84, 0x95, 0x96, 0x9a, 0x88, 0x82, 0x87, 0x9f, 0xc9, 0xcc, 0xde, 0xdb, 0xc3, 0xd1, 0xdd, 0xc0, 0xd4, 0xc5, 0xc6, 0xca, 0xd8, 0xd2, 0xd7, 0xcf, 0xf2, 0xf7, 0xe5, 0xe0, 0xf8, 0xea, 0xe6, 0xfb, 0xef, 0xfe, 0xfd, 0xf1, 0xe3, 0xe9, 0xec, 0xf4, 0xa2, 0xa7, 0xb5, 0xb0, 0xa8, 0xba, 0xb6, 0xab, 0xbf, 0xae, 0xad, 0xa1, 0xb3, 0xb9, 0xbc, 0xa4, 0x39, 0x3c, 0x2e, 0x2b, 0x33, 0x21, 0x2d, 0x30, 0x24, 0x35, 0x36, 0x3a, 0x28, 0x22, 0x27, 0x3f, 0x02, 0x07, 0x15, 0x10, 0x08, 0x1a, 0x16, 0x0b, 0x1f, 0x0e, 0x0d, 0x01, 0x13, 0x1a, 0x1c, 0x04, 0xc2, 0xc7, 0xd5, 0xd0, 0xc8, 0xda, 0xd6, 0xcb, 0xdf, 0xce, 0xcd, 0xc1, 0xd3, 0xd9, 0xdc, 0xc4, 0x09, 0x0c, 0x1e, 0x1b, 0x03, 0x11, 0x1d, 0x00, 0x14, 0x05, 0x06, 0x0a, 0x18, 0x12, 0x17, 0x0f, 0x52, 0x57, 0x45, 0x40, 0x58, 0x4a, 0x46, 0x5b, 0x4f, 0x5e, 0x5d, 0x51, 0x43, 0x49, 0x4c, 0x54, 0x59, 0x5c, 0x4e, 0x4b, 0x53, 0x41, 0x4d, 0x50, 0x44, 0x55, 0x56, 0x5a, 0x48, 0x42, 0x47, 0x5f, 0x69, 0x6c, 0x7e, 0x7b, 0x63, 0x71, 0x7d, 0x60, 0x74, 0x65, 0x66, 0x6a, 0x78, 0x72, 0x77, 0x6f, 0xa9, 0xac, 0xbe, 0xbb, 0xa3, 0xb1, 0xbd, 0xa0, 0xb4, 0xa5, 0xa6, 0xaa, 0xb8, 0xb2, 0xb7, 0xaf, 0x92, 0x97, 0x85, 0x80, 0x98, 0x8a, 0x86, 0x9b, 0x8f, 0x9e, 0x9d, 0x91, 0x83, 0x89, 0x8c, 0x94, 0x32, 0x37, 0x25, 0x20, 0x38, 0x2a, 0x26, 0x3b, 0x2f, 0x3e, 0x3d, 0x31, 0x23, 0x29, 0x2c, 0x34, 0x62, 0x67, 0x75, 0x70, 0x68, 0x7a, 0x76, 0x6b, 0x7f, 0x6e, 0x6d, 0x61, 0x73, 0x79, 0x7c, 0x64, 0xf9, 0xfc, 0xee, 0xeb, 0xf3, 0xe1, 0xed, 0xf0, 0xe4, 0xf5, 0xf6, 0xfa, 0xe8, 0xe2, 0xe7, 0xff

.org 0x0000

.macro add_roundkey_low
	; takes the registers in which the key is stored as arguments
	eor r8, @0
	eor r9, @1
	eor r10, @2
	eor r11, @3
	eor r12, @4
	eor r13, @5
	eor r14, @6
	eor r15, @7
.endmacro

.macro add_roundkey_high
	; takes the registers in which the key is stored as arguments
	eor r16, @0
	eor r17, @1
	eor r18, @2
	eor r19, @3
	eor r20, @4
	eor r21, @5
	eor r22, @6
	eor r23, @7
.endmacro

.macro keyschedule
	; XOR left with right
	eor @1, @5
	eor @2, @6
	eor @3, @7
	eor @0, @4

	; XOR sk7 round index
	ldi r24, @8
	eor @7, r24

	; Run new sk5,sk6 through sbox
	; ldi r31, high(sbox *2) not necessary; this happened in mix of previous round
	mov r30, @2
	lpm @2, Z

	mov r30, @3
	lpm @3, Z
.endmacro

.macro rotate_sub_mix_nibbles
	; assumes <dest> <source>
	; assumes state starts in @8-@15 and that r24 is empty
	; state will be in @0-@7 after execution
	
	; Load mult2
	ldi r31, high(mult2 * 2)

	; move mult2 of states in low registers to copy state
	mov r30, @10
	lpm @0, Z

	mov r30, @11
	lpm @1, Z

	mov r30, @12
	lpm @2, Z

	mov r30, @13
	lpm @3, Z

	; add mult1
	ldi r31, high(sbox * 2)
	
	; mov r30, @13
	lpm r24, Z
	eor @0, r24
	eor @1, r24
	
	mov r30, @12
	lpm r24, Z
	eor @0, r24
	eor @3, r24
	
	mov r30, @11
	lpm r24, Z
	eor @2, r24
	eor @3, r24
	
	mov r30, @10
	lpm r24, Z
	eor @1, r24
	eor @2, r24
	
	; Load mult3
	ldi r31, high(mult3 * 2)

	; mov r30, @10
	lpm r24, Z
	eor @3, r24
	
	mov r30, @11
	lpm r24, Z
	eor @0, r24
	
	mov r30, @12
	lpm r24, Z
	eor @1, r24
	
	mov r30, @13 
	lpm r24, Z
	eor @2, r24

	; Second matrix......
	; Load mult3
	; ldi r31, high(mult3 * 2)
	
	mov r30, @15
	lpm @4, Z

	mov r30, @8
	lpm @5, Z

	mov r30, @9
	lpm @6, Z
	
	mov r30, @14
	lpm @7, Z

	; Load mult2
	ldi r31, high(mult2 * 2)

	; mov r30, @14
	lpm r24, Z
	eor @4, r24

	mov r30, @9
	lpm r24, Z
	eor @7, r24

	mov r30, @8
	lpm r24, Z
	eor @6, r24

	mov r30, @15
	lpm r24, Z
	eor @5, r24
	
	; Put x1 of state in new state registers
	ldi r31, high(sbox * 2)
	; mov r30, @15
	lpm r24, Z
	eor @6, r24
	eor @7, r24
	
	mov r30, @8
	lpm r24, Z
	eor @4, r24
	eor @7, r24
	
	mov r30, @9
	lpm r24, Z
	eor @4, r24
	eor @5, r24

	mov r30, @14
	lpm r24, Z
	eor @6, r24
	eor @5, r24
.endmacro

.macro rotate_sub_mix_nibbles_high2low
	rotate_sub_mix_nibbles r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23
.endmacro

.macro rotate_sub_mix_nibbles_low2high
	rotate_sub_mix_nibbles r16, r17, r18, r19, r20, r21, r22, r23, r8, r9, r10, r11, r12, r13, r14, r15 
.endmacro

; Expected output in r8-r15: 592356C4997176C8

; Load key into registers
ldi r16, 0x12
ldi r17, 0x34
ldi r18, 0x56
ldi r19, 0x78
ldi r20, 0x90
ldi r21, 0xAB
ldi r22, 0xCD
ldi r23, 0xEF

; Mov key to lower registers (in right order to prevent rotate with key scheduling)
mov r2, r16
mov r3, r17
mov r0, r18
mov r1, r19
mov r6, r20
mov r7, r21
mov r4, r22
mov r5, r23

; Load plaintext
; the first rotatenibbles step is done implicitly here, through loading order
ldi r16, 0xFF
ldi r17, 0xFF
ldi r18, 0xFF
ldi r19, 0xFF
ldi r20, 0xFF
ldi r21, 0xFF
ldi r22, 0xFF
ldi r23, 0xFF

ldi r31, high(sbox *2)

; # Round 1 
add_roundkey_high r2, r3, r0, r1, r6, r7, r4, r5
keyschedule r2, r3, r0, r1, r6, r7, r4, r5, 0x01
rotate_sub_mix_nibbles_high2low

; # Round 2 
add_roundkey_low r7, r4, r5, r6, r3, r0, r1, r2
keyschedule r7, r4, r5, r6, r3, r0, r1, r2, 0x02
rotate_sub_mix_nibbles_low2high

; # Round 3 
add_roundkey_high r0, r1, r2, r3, r4, r5, r6, r7
keyschedule r0, r1, r2, r3, r4, r5, r6, r7, 0x03
rotate_sub_mix_nibbles_high2low

; # Round 4 
add_roundkey_low r5, r6, r7, r4, r1, r2, r3, r0
keyschedule r5, r6, r7, r4, r1, r2, r3, r0, 0x04
rotate_sub_mix_nibbles_low2high

; # Round 5 
add_roundkey_high r2, r3, r0, r1, r6, r7, r4, r5
keyschedule r2, r3, r0, r1, r6, r7, r4, r5, 0x05
rotate_sub_mix_nibbles_high2low

; # Round 6 
add_roundkey_low r7, r4, r5, r6, r3, r0, r1, r2
keyschedule r7, r4, r5, r6, r3, r0, r1, r2, 0x06
rotate_sub_mix_nibbles_low2high

; # Round 7 
add_roundkey_high r0, r1, r2, r3, r4, r5, r6, r7
keyschedule r0, r1, r2, r3, r4, r5, r6, r7, 0x07
rotate_sub_mix_nibbles_high2low

; # Round 8 
add_roundkey_low r5, r6, r7, r4, r1, r2, r3, r0
keyschedule r5, r6, r7, r4, r1, r2, r3, r0, 0x08
rotate_sub_mix_nibbles_low2high

; # Round 9 
add_roundkey_high r2, r3, r0, r1, r6, r7, r4, r5
keyschedule r2, r3, r0, r1, r6, r7, r4, r5, 0x09
rotate_sub_mix_nibbles_high2low

; # Round 10
add_roundkey_low r7, r4, r5, r6, r3, r0, r1, r2
keyschedule r7, r4, r5, r6, r3, r0, r1, r2, 0x0A
rotate_sub_mix_nibbles_low2high

; # Round 11
add_roundkey_high r0, r1, r2, r3, r4, r5, r6, r7
keyschedule r0, r1, r2, r3, r4, r5, r6, r7, 0x0B
rotate_sub_mix_nibbles_high2low

; # Round 12
add_roundkey_low r5, r6, r7, r4, r1, r2, r3, r0
keyschedule r5, r6, r7, r4, r1, r2, r3, r0, 0x0C
rotate_sub_mix_nibbles_low2high

; # Add final round key
add_roundkey_high r2, r3, r0, r1, r6, r7, r4, r5

sleep
